// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id    String @id @unique @default(cuid())
  username String  @unique
  password String  
  avatarId String?
  role     Role
  space    Space[]
  avatars  Avatar? @relation(fields: [avatarId], references: [id])
}

model Space {
  id   String @id @unique @default(cuid())
  name  String
  width Int
  height Int
  thumbnail String
  creatorId  String
  creator   User  @relation(fields: [creatorId],  references: [id])
  spaceElements  SpaceElements[]
}

model SpaceElements {
  id        String @id @unique @default(cuid())
  elementId String
  spaceId   String
  x         Int
  y         Int
  elements  Element @relation(fields: [elementId], references: [id])
  spaces    Space   @relation(fields: [spaceId], references: [id])
}

model Element {
  id       String @id @unique @default(cuid())
  width    Int
  height   Int
  imageURL String
  spaceElements SpaceElements[]
  mapElements   MapElements[]
}

model Map {
  id      String @id @unique @default(cuid())
  name    String
  width   Int
  height  Int
  mapElements MapElements[]
}

model MapElements {
  id         String @id @unique @default(cuid())
  elementId  String
  mapId      String
  x          Int?
  y          Int?
  elements   Element @relation(fields: [elementId], references: [id])
  maps       Map     @relation(fields: [mapId], references: [id])
}

model Avatar {
  id       String @id @unique @default(cuid())
  name     String?
  imageURL String?
  users    User[]
}


enum Role {
  Admin
  User
}